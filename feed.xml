<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://www.stephenaument.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.stephenaument.com/" rel="alternate" type="text/html" /><updated>2024-12-29T17:44:30-06:00</updated><id>https://www.stephenaument.com/feed.xml</id><title type="html">Step Aument</title><subtitle>Compassionate Coder. Technical Leader.</subtitle><author><name>Step Aument</name></author><entry><title type="html">What is Refactoring? || 3-Minute Thursday</title><link href="https://www.stephenaument.com/blog/what-is-refactoring/" rel="alternate" type="text/html" title="What is Refactoring? || 3-Minute Thursday" /><published>2020-07-12T00:00:00-05:00</published><updated>2020-07-12T00:00:00-05:00</updated><id>https://www.stephenaument.com/blog/what-is-refactoring</id><content type="html" xml:base="https://www.stephenaument.com/blog/what-is-refactoring/"><![CDATA[<h1 id="what-is-refactoring--3-minute-thursday">What is Refactoring? || 3-Minute Thursday</h1>

<p>You’ve heard the term. You’ve seen it in a commit message. Maybe you’ve even been asked to do it, but what exactly is code refactoring??</p>

<p>Have you wondered what refactoring means? Or maybe you know what it is, but aren’t sure how to explain refactoring concisely.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-BSQZEX0kpg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>3-Minute Thursday is a new series where I answer your burning code and career questions on your journey from junior to senior developer.</p>

<p>Transcript:</p>

<h1 id="what-is-refactoring">What is Refactoring?</h1>

<p>You’ve heard the term. You seen it in a commit message. Maybe you’ve even been asked to DO it. And you’re vaguely aware that it has something to do with improving your code. But what exactly is refactoring?</p>

<p>Hey, this is Step Aument. And this is Three-Minute Thursday.</p>

<p>Refactoring is a software development practice. It’s something you do to code.</p>

<p>Refactoring, or re-factoring, implies that we are changing the existing factorization of our code. But, what is our code’s factorization?</p>

<p>Do you remember the concept of a factor from math?</p>

<p>If you look at this equation:   five times four equals twenty, twenty is the product, four and five are the factors. In other words, they are the component parts that together produce the result.</p>

<p>But twenty can be composed of other factors as well. Ten and two are factors of twenty. And we can break either of these equations down into twenty’s prime factorization, five times two times two.</p>

<p>So notice that if I have five times four, I can refactor that into five times two times two, which I could then refactor into ten times two. These are interchangeable.</p>

<p>The structure of the equation has changed, but the outcome - or external behavior has not changed. All three of these equal twenty.</p>

<p>So that’s math, but what about code? What is the factorization of code that we change when we refactor?</p>

<p>Just like with the math equation, the factorization of a piece of computer code is its structure - the composition of the component pieces that produce the code’s external behavior.</p>

<p>There are usually lots of ways to make a computer do something.</p>

<p>I’ll show you what I mean.</p>

<p>These two bits of code are functionally identical, but they’re structured differently.</p>

<p>As a software developer it’s your job to weigh these solutions to come up with an appropriate approach for any given piece of code.</p>

<p>So, refactoring is changing the structure of code without changing its external, observable behavior, hopefully making it more maintainable in the process.</p>

<p>If you want more concrete examples of refactoring, be sure to visit my exercism.io walkthrough series, <a href="https://www.youtube.com/playlist?list=PLJQ6Wm449IcFAoewLSqKYyVn3ODsrcrMj">linked in the description below</a>, where I do a ton of refactoring.</p>

<p>If you want a deeper dive on how to approach refactoring so you can write code today that you won’t hate in 6 months and become a hero to your team and add massive value to your company, check out my tactical refactoring video course also linked <a href="https://www.tacticalrefactoring.com">in the description below</a>.</p>

<p>Thanks for watching, and I’ll see you in the next video!</p>]]></content><author><name>Step Aument</name></author><category term="Software Development" /><category term="3-min Thursday" /><summary type="html"><![CDATA[What is Refactoring? || 3-Minute Thursday]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22feature%22=%3E%22/assets/images/hero/chuttersnap-kyCNGGKCvyw-unsplash.jpg%22,%20%22topPosition%22=%3E%220px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22feature%22=%3E%22/assets/images/hero/chuttersnap-kyCNGGKCvyw-unsplash.jpg%22,%20%22topPosition%22=%3E%220px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Are You Still Feeling Overwhelmed With Your Backlog?</title><link href="https://www.stephenaument.com/blog/ruthless-stack-ranking/" rel="alternate" type="text/html" title="Are You Still Feeling Overwhelmed With Your Backlog?" /><published>2019-03-21T00:00:00-05:00</published><updated>2019-03-21T00:00:00-05:00</updated><id>https://www.stephenaument.com/blog/ruthless-stack-ranking</id><content type="html" xml:base="https://www.stephenaument.com/blog/ruthless-stack-ranking/"><![CDATA[<h1 id="ruthlessly-stack-rank-your-people-priorities">Ruthlessly Stack Rank Your <del>People</del> Priorities</h1>

<blockquote class="largeQuote"> “The mark of a great man is one who knows when to set aside the important things in order to accomplish the vital ones.” 
― Brandon Sanderson, <em>The Alloy of Law</em></blockquote>

<p><em>The Long Dark</em> is a challenging survival game from Hinterland Games that places you in remote northern Canada during winter with few resources.  One thing <em>The Long Dark</em> does that other games don’t tend to bother with is a realistic-ish (realistish?) inventory system. Every item has weight, and based on a variety of factors you can only carry a certain weight before it starts to affect your speed and stamina.</p>

<p>It’s not a wooden literalism, but it has the “feel” of reality. I remember running around in the <em>Half Life</em> series with what would have been thousands of pounds of gear that would have filled a large truck, not to mention what you can fit in your <em>Minecraft</em> inventory. But you won’t get away with that claptrap here.</p>

<p>This inventory system forces you to make hard choices about what to pick up and what to drop. Can I afford to pick up this log now? How much meat should I harvest from this deer carcass?</p>

<p>You are not always choosing between valuable items and junk. Sometimes you have to leave good items behind, and it hurts.</p>

<h2 id="the-concept">The Concept</h2>

<p>I’ve become associated around <a href="https://www.readyrosie.com">ReadyRosie</a> with the concept of ruthlessly stack-ranking priorities.</p>

<p>What is stack ranking? Stack ranking is simply sorting a list of items 1-N.</p>

<p>Some other prioritization systems have you group tasks into buckets, A, B, C, etc. Stack ranking forces you to choose which of any 2 items is more important.</p>

<p>Note: This is a <em>terrible</em> idea when it comes to people (please don’t stack rank your people!), but it works <em>brilliantly</em>  when it comes to prioritizing work.</p>

<h2 id="lol-why-do-you-do-this">LOL, Why Do You Do This?</h2>

<p>We are a small team at <a href="https://www.readyrosie.com">ReadyRosie</a>. There will always be more than we can do. We will never get to the bottom of our backlog. Sound familiar?</p>

<p>And, we are never choosing between adding deep value and adding fluff. Just like in <em>The Long Dark</em>, every day we have to choose between valuable options. Which good things are we not going to do this sprint so we can focus on these other things that have edged them out?</p>

<p>Does this sound familiar? Too much to do, not enough time.</p>

<p>So, we stack rank.</p>

<h2 id="the-method">The Method</h2>

<p>We get all stakeholders together in a (virtual) room, often in real time, and hash it out. We’ve done it by sorting the list, one item at a time. We’ve done it by assigning numbers 0-100 and then sorting based on those numbers. We’ve done it as one group. We’ve done it in several cross-functional teams.</p>

<p>Whichever way, the most important thing is that the top 5-10 items are what we have identified as the <em>most important</em> things we could be doing, <em>in that order.</em> Then if we work from the top down, we can know that what we are doing is what we <em>should</em> be doing, because it meets our definition of doing the most important thing we <em>could</em> be doing.</p>

<p>It’s the same for individual projects or features. We’re learning to be iterative in our product development and optimize for learning in tight feedback loops by putting working software in our customers hands as quickly as we can. But sometimes somebody has been chewing on a project idea for a while.</p>

<p>We have gifted subject matter experts who have been in the classroom and know our customers and their pains well. They are thoughtful. They listen. They are creative. Often, they have a pretty well developed idea of a complete solution to a problem. One that would take months to implement and be a huge gamble. Is that complete solution the right solution? Maybe. Can we afford months of development time before actually getting valuable feedback that tells us if it’s the right solution? Absolutely not.</p>

<p>The reality is that we will never know less about our customers or our product than we know today. The reality is that we will learn so much over the next few sprints that those items further down the list will change a lot, or go away altogether.</p>

<h2 id="what-about-dates">What About Dates?</h2>

<p>Sometimes there is an actual important date somewhere on our calendar. It’s rarer than you would think, but it happens. When it does happen that something actually needs to happen by a certain date, that makes it more important than something that doesn’t need to happen by a date (or by a later date). Do the date-bound thing first. Do it <em>now</em>.</p>

<h2 id="crushing-hopes-and-dreams---a-dramatic-recreation">Crushing Hopes and Dreams - A Dramatic Recreation</h2>

<p>I’ve led groups through the exercise of stack ranking the precious, well thought-out features of their solution and the conversation goes something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INT. CONFERENCE ROOM. DAY

STEP and a PRODUCT OWNER/SUBJECT MATTER EXPERT stand at the whiteboard. A group of PostIt
notes representing product features covers one side of the whiteboard.

                        STEP

          If we could do one thing this sprint. What’s the most important
          piece of this that would add value to our customers while also
          giving us the best feedback so we can learn the most? What
          would it be?

                        PRODUCT OWNER/SUBJECT MATTER EXPERT

          One??? Can I have five things?

                        STEP

          We only have time for one.

                        PRODUCT OWNER/SUBJECT MATTER EXPERT

          I guess it would be this one.

                        STEP

          Perfect. Oh, hey. I just found out we have room for one more.

                        PRODUCT OWNER/SUBJECT MATTER EXPERT

          Then we should add this one.

                        STEP

          You know what? We have time for one more feature.

                        PRODUCT OWNER/SUBJECT MATTER EXPERT

          Well, the next three really go together.

                        STEP

          There is room for three total, and I’m not sure we will ever
          do any more work on this project again after this sprint.

                        PRODUCT OWNER/SUBJECT MATTER EXPERT

          I hate you, Step. But if I have to choose, it’s this one.

FADE TO BLACK

</code></pre></div></div>

<h2 id="so-what">So What?</h2>

<p>In the end, you wind up with the most important things at the top of the list.
 And actually, it’s been a long time since we’ve had to argue through a long, pre-planned project like that. We are learning to do lean, iterative product development together as a whole team. We are figuring out what “agile” and “lean” mean here at <a href="https://www.readyrosie.com">ReadyRosie</a>, and it’s not exactly what it means anywhere else. Just as it should be.</p>

<p>What “important” means in your context is an entirely different question, and learning to make those decisions is another skill to develop. But if you prioritize this way and actually work from the top of your list downward, then a lot of things just fall into place.</p>

<p>Did your day get away from you in the afternoon? Only get to work on one thing? That’s okay, because that one thing that you worked on was the most important thing. What else can you ask for?</p>]]></content><author><name>Step Aument</name></author><category term="Product Development" /><category term="Prioritization" /><summary type="html"><![CDATA[Ruthlessly Stack Rank Your People Priorities]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22feature%22=%3E%22/assets/images/hero/the-long-dark.jpg%22,%20%22topPosition%22=%3E%22-220px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22feature%22=%3E%22/assets/images/hero/the-long-dark.jpg%22,%20%22topPosition%22=%3E%22-220px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lead with Value. Be Generous.</title><link href="https://www.stephenaument.com/blog/lead-with-value-be-generous/" rel="alternate" type="text/html" title="Lead with Value. Be Generous." /><published>2019-03-13T00:00:00-05:00</published><updated>2019-03-13T00:00:00-05:00</updated><id>https://www.stephenaument.com/blog/lead-with-value-be-generous</id><content type="html" xml:base="https://www.stephenaument.com/blog/lead-with-value-be-generous/"><![CDATA[<style>
  ul {
    list-style-type: unset;
    margin: 2em;
    padding: unset;
  }
</style>

<h2 id="lead-with-value-be-generous">Lead with Value. Be Generous.</h2>

<p>Redditor <a href="https://www.reddit.com/user/programmingerror">programmingerror</a>, aka Sam Zhao recently wrote a helpful post about value as it relates to the job hunt as a programmer, which he also posted on his <a href="https://ilovecomputering.com/the-most-important-thing-to-understand-in-job-searching-value/">blog</a>. There is also a principle in entrepreneurship that you find success in proportion to the value that you create.</p>

<blockquote class="largeQuote">“You can get everything in life you want if you will just help enough other people get what they want.” - Zig Ziglar</blockquote>

<p>And really, that’s the fundamental reality of all financial transactions (aside from pure charity). Even if you are a salaried employee. Even if you are flipping burgers for an hourly wage. You are not being paid for your time. You are being paid for the value that you create. It is worth $X an hour for the manager to hire you to flip that burger so she doesn’t have to do it herself. I buy your product because it saves me $X worth of time or money, or makes me $X and you are charging me less than that.</p>

<blockquote>
  <p>”Strive not to be a success, but rather to be of value.” - Albert Einstein</p>
</blockquote>

<p>If you want to level up your earning potential and/or advance in your career, what can you do? <strong>Increase your value-creating abilities.</strong></p>

<p>But this doesn’t just equal leveling up your skills. You have to know how skills actually translate to (or scaffold towards) value-creating abilities. Which skills do you learn?</p>

<p>There are lots of lists out there of top skills for software developers to learn. Some of them focus on new trends that will keep you on the cusp of high-paying technical work. I won’t poo-poo these lists. It’s important to keep your tools sharp and, by all means, get a better paying job this year if you can. But I want to take a different approach here.
 I’m going to focus on more enduring skills that will serve you no matter what language or framework you work with and will actually help you into the middle and late stages of your career, help you move from individual contributor to leader, or even help you transition from employee to entrepreneur if that’s something you’d like to do.</p>

<p>Most of these are what we call “soft skills.”</p>

<ul>
  <li>listening</li>
  <li>idea/pain discovery</li>
  <li>problem solving</li>
  <li>empathy</li>
  <li>writing maintainable code</li>
  <li>prioritization</li>
  <li>showing up</li>
  <li>following through</li>
  <li>shipping</li>
  <li>doing small things</li>
  <li>optimizing for learning at every level</li>
  <li>go deep on one thing</li>
  <li>when in doubt, ship and measure</li>
  <li>developing a growth mindset if you don’t have one</li>
  <li>maintaining an optimistic outlook</li>
  <li>assuming the best intentions in others</li>
  <li>writing</li>
  <li>selling/marketing</li>
</ul>

<blockquote class="largeQuote">One person gives freely, yet gains even more;  another withholds unduly, but comes to poverty. A generous person will prosper;  whoever refreshes others will be refreshed.  - Proverbs 11:24–25</blockquote>

<p>Don’t focus on getting what you think you deserve to earn. Develop the ability to deliver the value commensurate to what you hope to earn.</p>

<p>Figure out how to deliver value, and as Sam points out, communicate that you bring that value. Lead with providing value and then figure out how to make money as a result of that. If you can make somebody $10 do you think they will be willing to give you $1 or $2? How many times would they be willing to sign up for that? Or as I heard somebody put it once, if you give me a pizza that I wouldn’t have had otherwise, I will happily give you a slice of it.</p>

<p>Go forth and add value to your world.</p>]]></content><author><name>Step Aument</name></author><category term="Career" /><category term="Entrepreneurship" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Elaine%20Casap%20on%20Unsplash%22,%20%22feature%22=%3E%22/assets/images/hero/elaine-casap-86020-unsplash.jpg%22,%20%22topPosition%22=%3E%22-180px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Elaine%20Casap%20on%20Unsplash%22,%20%22feature%22=%3E%22/assets/images/hero/elaine-casap-86020-unsplash.jpg%22,%20%22topPosition%22=%3E%22-180px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Exercism.io Walkthrough Screencasts</title><link href="https://www.stephenaument.com/blog/exercism-io-walkthrough/" rel="alternate" type="text/html" title="Exercism.io Walkthrough Screencasts" /><published>2019-02-26T00:00:00-06:00</published><updated>2019-02-26T00:00:00-06:00</updated><id>https://www.stephenaument.com/blog/exercism-io-walkthrough</id><content type="html" xml:base="https://www.stephenaument.com/blog/exercism-io-walkthrough/"><![CDATA[<h2 id="exercismio-walkthrough-screencast-series">Exercism.io Walkthrough Screencast Series</h2>

<p>I’m experimenting with a screencast series on YouTube walking through the <a href="https://exercism.io">exercism.io</a> Ruby track.</p>

<blockquote>
  <p>If you want to be notified when new episodes get posted to YouTube <a href="#subscribe">subscribe down below</a> and grab a helpful cheatsheet while you are at it.</p>
</blockquote>

<p>Before I got to do a lot of pairing with other experienced devs I always wished I could watch more people just code. I didn’t have a great sense of how other people went about their work or if my methods were weird or normal. This was especially true early on. It’s one thing to follow a tutorial, but I just wanted to see somebody code.</p>

<p>I’m certainly not the first person to post exercism.io walkthroughs, but my assumption is that one more example of a working developer’s workflow and thought process is a good thing.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PLJQ6Wm449IcFAoewLSqKYyVn3ODsrcrMj" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>I’m also trying to think of creative ways to coach my team more effectively. My schedule doesn’t always allow large blocks of pairing, but I can find time to record and post a screencast. These videos will hopefully be useful for them.</p>

<p>My plan is to do handful of these and then promote them a bit to see if they are as helpful as I hope they will be. If you watch them and find them helpful, drop me a note or leave a comment.</p>

<p>UPDATE: I’ve packaged the first group of these into a FREE video email course that I’m calling, <a href="/10dotr/index.html"><em>10 Days of Tactical Ruby With Exercism.io</em></a>. <a href="/10dotr/index.html">Go here to enroll.</a></p>]]></content><author><name>Step Aument</name></author><category term="Programming" /><category term="Screencasts" /><summary type="html"><![CDATA[Exercism.io Walkthrough Screencast Series]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22feature%22=%3E%22/assets/images/hero/exercism-io.png%22,%20%22topPosition%22=%3E%22-180px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22feature%22=%3E%22/assets/images/hero/exercism-io.png%22,%20%22topPosition%22=%3E%22-180px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Underpromise. Overdeliver.</title><link href="https://www.stephenaument.com/blog/underpromise-overdeliver/" rel="alternate" type="text/html" title="Underpromise. Overdeliver." /><published>2018-09-28T00:00:00-05:00</published><updated>2018-09-28T00:00:00-05:00</updated><id>https://www.stephenaument.com/blog/underpromise-overdeliver</id><content type="html" xml:base="https://www.stephenaument.com/blog/underpromise-overdeliver/"><![CDATA[<h2 id="always-provide-fanatical-customer-service">Always Provide Fanatical Customer Service</h2>

<p>Faber-Castell has blown my mind with fanatical customer service that embodies the principle, “underpromise and overdeliver”.</p>

<p>I’ve had fountain pens off and on since high school. Mostly disposable pens that didn’t write particularly well. My first real pen was a Pelikan classic. I don’t exactly remember the model. That was the pen with which I really learned to use and care for a fountain pen. Unfortunately, as learning goes, I wasn’t really ready for that pen. I cracked the lid through some carelessness and from that point on the ink would dry out too quickly to be useful anymore. I held on to it as a souvenir, but it got lost in a move at some point.</p>

<p>My wife gave me a Faber-Castell Ambition fountain pen in pearwood for my birthday 8 years ago. It’s a beautiful pen. I had been admiring it at <a href="http://paper-ya.com/">Paper Ya</a> on Granville Island in Vancouver for months. It was sleek and architectural. Modern. I loved the straight lines. The narrowness of the barrel. The color of the wood. The weight. That pen immediately became my daily carry pen.</p>

<p>What we didn’t realize at the time was that it would be our last year in Vancouver. We came home to Texas the following summer to be closer to our aging parents. That pen became a token of our time there. It took on the added weight of tying me to a city that I loved and missed.</p>

<p>In the last three or so years, the cap became loose. Eventually it would fall off under its own weight. At the same time, the inner core of the pen became detached from the barrel and would slide back and forth. For fear of losing the cap, I stopped carrying it.</p>

<p>Finally, after googling around for options to fix the cap, I decided to email Faber-Castell customer support. I asked them about repairs or parts. I received the following email in reply:</p>

<blockquote>
Dear Mr. Aument:

Thank you for your interest in Faber-Castell and the Design Brand.

Thank you for your interest in Faber-Castell. I am sorry to hear that you are experiencing a problem with your instrument. If you are located in the U.S. (only), and to ensure proper fit and function, please send the entire instrument along to the address listed below for assessment/repairs. 
 
Address:
Faber-Castell USA
Attn: Repairs
9450 Allen Drive, Ste. B
Cleveland, OH  44125
 
Repairs should be sent in a protected, traceable fashion as Faber-Castell is not responsible for items lost or damaged prior to receipt.

- Please include a note indicating what the problem is exactly and, within the note, include your return shipping address and daytime phone number/email address.  
- Empty all fountain pens of ink.  
- Do not send original gift packaging.  
- Do not tape or glue parts together.  
 
Once your instrument has been received and assessed we will contact you with the charges will apply, prior to the start of the actual repair work. All estimates are provided by phone, but I can tell you that it would be no more than $30. 
 
Please let me know if I can assist any further as I will surely do my best to help.

Sincerely,
 
Michelle ******
Consumer Relations Specialist
</blockquote>

<p>That seemed fair to me! I shipped off the pen and awaited my estimate.</p>

<p>After a couple of weeks, I received a shipping notification(!) and the following voicemail.</p>

<blockquote>
Hi Mr. Aument, this is Michelle with Faber-Castell. Just calling to let you know we received your Ambition Pearwood. I wanted to let you know that actually the nib is the issue. Obviously your barrel, there's bonding on the barrel and we are going to be replacing the barrel. The issue with the cap, the cap is actually fine. It's the nib that is not seated properly. Given that we're already going to be replacing the barrel, I'm just going to go ahead and replace the pen since there's also issues with the nib. That's going to be shipping out to you most likely on Monday to your PO Box XXX. So it'll just be an entirely new pen. I did want to let you know that in general the warranty for the design brand is two years for manufacturer's defect. I know you had said this was eight years. So just keep that in mind for the replacement. And then like I said, if you ever have any follow-up questions, feel free to give us a call 1-800-311-8064. Thank you.
</blockquote>

<p>Wow! Now <em>that’s</em> customer service! I had zero expectation of this. I was perfectly willing to pay <em>something</em> to have my beloved pen back in working order, but this was above and beyond.</p>

<p>Anyway, I went to the post office to pick up the pen today and and when I opened the package - double wow!</p>

<p><img src="/assets/images/posts/faber-castell-package.jpg" alt="package-contents" /></p>

<p>Look at that!</p>

<p>Nice handwritten postcard. Bonus pencil.</p>

<p>“But,” you say, “this wasn’t altruistic. They do this for everybody. It’s marketing. Plus they sent you a sample pencil so you’ll want to buy those.”</p>

<p>Well, duh. Of course. But they also didn’t <em>have</em> to do this. I <em>know</em> there’s self interest in this, but do you know how it made me feel? It made me feel important. It made me feel lavishly taken care of.</p>

<blockquote class="largeQuote">
"There is a spiritual aspect to our lives — when we give, we receive — when a business does something good for somebody, that somebody feels good about them!" - Ben Cohen, Co-Founder Ben &amp; Jerry's</blockquote>

<p>This fanatical customer service was a case of “underpromise and overdeliver.” They promised me a repair estimate that would likely be under $30. They delivered a brand new replacement pen at their cost, a hand-written note, and a free bonus gift.</p>

<p>Faber-Castell has been in business since 1761. <em>1761!</em> That’s 257 years! I would have to assume that they have learned some things during that time about staying in business.</p>

<p>Often in business it’s not the hard things that make the most difference. It’s the little things that show our customers that we care about them and that we are here to serve them. When we lead with service and make it our intent to only make money by having served others <em>first</em> we earn loyal customers. Even if they might not make better pens than every competitor (which they might, I’m just saying), they <em>can</em> strive to provide better customer service than anyone else.</p>

<p>And so can <em>you</em>. Can you out serve your competitors in this way? Even if you’re just getting your startup off the ground? Can you provide fanatical service to your customers, whether your customers be outside or internal to your organization?</p>

<p>Thank you, Michelle at Faber-Castell Consumer Relations!</p>

<p>I already loved this Faber-Castell pen. After today, I love Faber-Castell, the company too. And I haven’t stopped telling people about their fanatical customer support.</p>

<p>I feel like we provide fanatical customer support at ReadyRosie (hi Hilari!), but what a stunning reminder.</p>

<p>So, I’m sad that this isn’t <em>that</em> pen. It’s a replacement. But it’s lovely and new and it can stand in for <em>that</em> pen. But now, not only does it serve to remind me of my wife, a special gift, and a city I miss, it also reminds me to always underpromise and overdeliver and to always provide fanatical customer service.</p>]]></content><author><name>Step Aument</name></author><category term="Business" /><category term="Customer Service" /><summary type="html"><![CDATA[Always Provide Fanatical Customer Service]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22feature%22=%3E%22/assets/images/hero/ambition-pearwood.jpg%22,%20%22topPosition%22=%3E%22-180px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22feature%22=%3E%22/assets/images/hero/ambition-pearwood.jpg%22,%20%22topPosition%22=%3E%22-180px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Backbone Collection Testing Gotcha</title><link href="https://www.stephenaument.com/blog/backbone-collection-testing-gotcha/" rel="alternate" type="text/html" title="Backbone Collection Testing Gotcha" /><published>2014-03-12T16:46:04-05:00</published><updated>2014-03-12T16:46:04-05:00</updated><id>https://www.stephenaument.com/blog/backbone-collection-testing-gotcha</id><content type="html" xml:base="https://www.stephenaument.com/blog/backbone-collection-testing-gotcha/"><![CDATA[<p>Be careful of this gotcha when testing a <a href="http://backbonejs.org/">Backbone.js</a>
collection. I don’t have much experience with Backbone, so this is probably
obvious to more experienced users, but hopefully this will help somebody else,
or at least myself in the future.</p>

<p>Today I needed to test the behavior of a Collection with a certain number of
Models in it. I didn’t care about the content of the models, just that they
contained a certain field. So, my pair and I came up with this setup to run
in our <a href="http://jasmine.github.io/">Jasmine</a> specs:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="nx">provider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WellMatch</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nc">Provider</span><span class="p">({</span><span class="na">display_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">})</span>
</div><div class="line-2"><span class="nx">providerArray</span> <span class="o">=</span> <span class="p">(</span><span class="nx">provider</span> <span class="k">for</span> <span class="p">[</span><span class="mi">1</span><span class="p">..</span><span class="mi">18</span><span class="p">])</span>
</div><div class="line-3"><span class="nx">providers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WellMatch</span><span class="p">.</span><span class="nx">Collections</span><span class="p">.</span><span class="nc">Providers</span><span class="p">(</span><span class="nx">providerArray</span><span class="p">)</span>
</div></code></pre></figure>

<p>We created an array of dummy models and passed them into our Collection. This
is one way you can create and populate a Collection. You pass in your array of
models and they become the models in the Collection.</p>

<blockquote>
  <p>If that <code class="highlight language-javascript" data-lang="javascript"><span class="nx">providerArray</span> <span class="o">=</span> <span class="p">(</span><span class="nx">provider</span> <span class="k">for</span> <span class="p">[</span><span class="mi">1</span><span class="p">..</span><span class="mi">18</span><span class="p">])</span></code> syntax freaks you out, don’t
worry. It’s just a bit of fancy CoffeeScript and all you need to understand
for now is that it creates an 18 item array with each element being
<code class="highlight language-javascript" data-lang="javascript"><span class="nx">provider</span></code>.</p>
</blockquote>

<p>Makes sense, right? Well, our test failed and when we started debugging in the
browser, here’s what we saw:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="nx">Providers</span> <span class="p">{</span><span class="nl">fullParams</span><span class="p">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">length</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">models</span><span class="p">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">_byId</span><span class="p">:</span> <span class="nb">Object</span><span class="p">,</span> <span class="nx">_events</span><span class="p">:</span> <span class="nb">Object</span><span class="err">…</span><span class="p">}</span>
</div></code></pre></figure>

<p>What??? <code class="highlight language-javascript" data-lang="javascript"><span class="nx">length</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">models</span><span class="p">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span></code>? When we looked into the models array it
contained a single item from the array we passed in.</p>

<p>Next we tried setting the models array after the fact:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="nx">provider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WellMatch</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nc">Provider</span><span class="p">({</span><span class="na">display_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">})</span>
</div><div class="line-2"><span class="nx">providers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WellMatch</span><span class="p">.</span><span class="nx">Collections</span><span class="p">.</span><span class="nc">Providers</span><span class="p">()</span>
</div><div class="line-3"><span class="nx">providers</span><span class="p">.</span><span class="nx">models</span> <span class="o">=</span> <span class="nx">providerArray</span>
</div></code></pre></figure>

<p>The models array seems right now, but the collection length was still one:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="nx">Providers</span> <span class="p">{</span><span class="nl">fullParams</span><span class="p">:</span> <span class="kd">function</span><span class="p">,</span> <span class="nx">length</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">models</span><span class="p">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">18</span><span class="p">],</span> <span class="nx">_byId</span><span class="p">:</span> <span class="nb">Object</span><span class="p">,</span> <span class="nx">_events</span><span class="p">:</span> <span class="nb">Object</span><span class="err">…</span><span class="p">}</span>
</div></code></pre></figure>

<p>This was just as baffling. By this time we had called in <a href="@timtyrrell">Tim
Tyrell</a> to tell us what we were doing wrong. Tim had the foresight
to read, not just the docs for the Backbone Collection <code class="highlight language-javascript" data-lang="javascript"><span class="nx">initializer</span></code> method, but
also the documentation for the <code class="highlight language-javascript" data-lang="javascript"><span class="nx">add</span></code> method, which had this to say (emphasis
added):</p>

<blockquote>
  <p><em>If you’re adding models to the collection that are already in the collection,
they’ll be ignored</em>, unless you pass {merge: true}, in which case their
attributes will be merged into the corresponding models, firing any
appropriate “change” events.</p>
</blockquote>

<p>Interesting! When add is called, it ignores any objects that are already
present in the models array. Since we are using the same model instance in each
position of our array, only the first one is being stored. The rest are being
dumped.</p>

<p>A quick check of the <a href="https://github.com/jashkenas/backbone/blob/master/backbone.js#L785-L799">Backbone source
code</a>
confirms that the initialize method is calling <code class="highlight language-javascript" data-lang="javascript"><span class="nx">reset</span></code> with the array you pass
in, which iterates over the array and calls <code class="highlight language-javascript" data-lang="javascript"><span class="nx">add</span></code> for each.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="cm">/* Excerpt starting at line 785 */</span>
</div><div class="line-2">
</div><div class="line-3"><span class="c1">// When you have more items than you want to add or remove individually,</span>
</div><div class="line-4"><span class="c1">// you can reset the entire set with a new list of models, without firing</span>
</div><div class="line-5"><span class="c1">// any granular &lt;code class="highlight language-javascript" data-lang="javascript"&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;/code&gt; or &lt;code class="highlight language-javascript" data-lang="javascript"&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;/code&gt; events. Fires &lt;code class="highlight language-javascript" data-lang="javascript"&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;/code&gt; when finished.</span>
</div><div class="line-6"><span class="c1">// Useful for bulk operations and optimizations.</span>
</div><div class="line-7"><span class="nx">reset</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</div><div class="line-8">  <span class="nx">options</span> <span class="o">||</span> <span class="p">(</span><span class="nx">options</span> <span class="o">=</span> <span class="p">{});</span>
</div><div class="line-9">  <span class="k">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">length</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</div><div class="line-10">    <span class="k">this</span><span class="p">.</span><span class="nf">_removeReference</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">options</span><span class="p">);</span>
</div><div class="line-11">  <span class="p">}</span>
</div><div class="line-12">  <span class="nx">options</span><span class="p">.</span><span class="nx">previousModels</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">;</span>
</div><div class="line-13">  <span class="k">this</span><span class="p">.</span><span class="nf">_reset</span><span class="p">();</span>
</div><div class="line-14">  <span class="nx">models</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nf">extend</span><span class="p">({</span><span class="na">silent</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span> <span class="nx">options</span><span class="p">));</span>
</div><div class="line-15">  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">silent</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nf">trigger</span><span class="p">(</span><span class="dl">'</span><span class="s1">reset</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</div><div class="line-16">  <span class="k">return</span> <span class="nx">models</span><span class="p">;</span>
</div><div class="line-17"><span class="p">},</span>
</div></code></pre></figure>

<p>So, my pair, Curtis Ekstrom decided to try creating a new object for each
element of the array with the same data to see if that would work.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="nx">providerArray</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">WellMatch</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nc">Provider</span><span class="p">(</span><span class="nx">display_name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">)</span> <span class="k">for</span> <span class="p">[</span><span class="mi">1</span><span class="p">..</span><span class="mi">18</span><span class="p">])</span>
</div><div class="line-2"><span class="nx">providers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WellMatch</span><span class="p">.</span><span class="nx">Collections</span><span class="p">.</span><span class="nc">Providers</span><span class="p">(</span><span class="nx">providerArray</span><span class="p">)</span>
</div></code></pre></figure>

<p>And so it did. At first I thought that Backbone was performing a simple object
identity check (===) vs an equality check (==). That would make sense of the
behavior we saw, but when I read the <code class="highlight language-javascript" data-lang="javascript"><span class="nx">add</span></code> documentation again, I saw that
passing <code class="highlight language-javascript" data-lang="javascript"><span class="p">{</span><span class="nl">merge</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span></code> along with the model or model array would result in the
attributes passed in being merged into the existing objects. It must be doing
something else entirely.</p>

<p>Another peek into the <a href="https://github.com/jashkenas/backbone/blob/master/backbone.js#L718-L728">source
code</a>
confirms. <code class="highlight language-javascript" data-lang="javascript"><span class="nx">add</span></code> calls <code class="highlight language-javascript" data-lang="javascript"><span class="kd">set</span></code>, which contains the relevant:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="cm">/* Except starting at line 718 */</span>
</div><div class="line-2">
</div><div class="line-3"><span class="c1">// If a duplicate is found, prevent it from being added and</span>
</div><div class="line-4"><span class="c1">// optionally merge it into the existing model.</span>
</div><div class="line-5"><span class="k">if </span><span class="p">(</span><span class="nx">existing</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="p">{</span>
</div><div class="line-6">  <span class="k">if </span><span class="p">(</span><span class="nx">remove</span><span class="p">)</span> <span class="nx">modelMap</span><span class="p">[</span><span class="nx">existing</span><span class="p">.</span><span class="nx">cid</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</div><div class="line-7">  <span class="k">if </span><span class="p">(</span><span class="nx">merge</span><span class="p">)</span> <span class="p">{</span>
</div><div class="line-8">    <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">attrs</span> <span class="o">===</span> <span class="nx">model</span> <span class="p">?</span> <span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span> <span class="p">:</span> <span class="nx">attrs</span><span class="p">;</span>
</div><div class="line-9">    <span class="k">if </span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parse</span><span class="p">)</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">existing</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</div><div class="line-10">    <span class="nx">existing</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</div><div class="line-11">    <span class="k">if </span><span class="p">(</span><span class="nx">sortable</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">sort</span> <span class="o">&amp;&amp;</span> <span class="nx">existing</span><span class="p">.</span><span class="nf">hasChanged</span><span class="p">(</span><span class="nx">sortAttr</span><span class="p">))</span> <span class="nx">sort</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</div><div class="line-12">  <span class="p">}</span>
</div><div class="line-13">  <span class="nx">models</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">existing</span><span class="p">;</span>
</div></code></pre></figure>

<p>That first line <code class="highlight language-javascript" data-lang="javascript"><span class="k">if </span><span class="p">(</span><span class="nx">existing</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="p">{</span></code> is the key. It looks for an
existing model in the <code class="highlight language-javascript" data-lang="javascript"><span class="nx">_byId</span></code> object hash, with the same <code class="highlight language-javascript" data-lang="javascript"><span class="nx">id</span></code>, <code class="highlight language-javascript" data-lang="javascript"><span class="nx">cid</span></code> or that is the
object itself. If it finds it, and <code class="highlight language-javascript" data-lang="javascript"><span class="nx">merge</span></code> is not <code class="highlight language-javascript" data-lang="javascript"><span class="kc">true</span></code> it rejects the model.</p>

<p>TL;DR - Make sure each Model in the array you pass to the Collection
initializer is a distinct instance, even if the data is otherwise identincal.</p>]]></content><author><name>Step Aument</name></author><category term="javascript" /><category term="debugging" /><category term="code" /><summary type="html"><![CDATA[Be careful of this gotcha when testing a Backbone.js collection.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Anita%20Jankovic%20on%20Unsplash%22,%20%22feature%22=%3E%22/assets/images/hero/anita-jankovic-730367-unsplash.jpg%22,%20%22topPosition%22=%3E%22-200px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Anita%20Jankovic%20on%20Unsplash%22,%20%22feature%22=%3E%22/assets/images/hero/anita-jankovic-730367-unsplash.jpg%22,%20%22topPosition%22=%3E%22-200px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Null Object Part 2</title><link href="https://www.stephenaument.com/blog/null-object-part-2/" rel="alternate" type="text/html" title="Null Object Part 2" /><published>2014-03-11T01:00:00-05:00</published><updated>2014-03-11T01:00:00-05:00</updated><id>https://www.stephenaument.com/blog/null-object-part-2</id><content type="html" xml:base="https://www.stephenaument.com/blog/null-object-part-2/"><![CDATA[<p>In a <a href="/blog/2014/03/05/the-null-object-pattern-and-method-missing-in-ruby/">previous post</a> I
described using <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code> in a Null Object to stand in for another
object and respond smartly to the original object’s interface. At the end of
that post I suggested that you could go farther than we did in creating a more
abstract object. Well, we got that chance.</p>

<p>In this post I will show you how we created a <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code> that can both stand
on its own and be extended with added functionality in a subclass. Our
<code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code> needs to be smart about the interface of the class that it’s
faking, so we’ll have to take that into account. Finally, we decided to
implement a smart <code class="highlight language-ruby" data-lang="ruby"><span class="nb">respond_to?</span></code> method to round out the functionality of our
<code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code>.</p>

<p>Here’s the form that our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> took at the end of the previous post:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilDuck</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-3">    <span class="s1">'Demo Duck'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-7">    <span class="s1">'sleeping'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9">
</div><div class="line-10">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-11">    <span class="s1">'gray'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13">
</div><div class="line-14">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-15">    <span class="kp">true</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17">
</div><div class="line-18">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</div><div class="line-19">    <span class="k">super</span> <span class="k">unless</span> <span class="no">Duck</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-20">    <span class="nb">name</span><span class="p">.</span><span class="nf">ends_with?</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">nil</span>
</div><div class="line-21">  <span class="k">end</span>
</div><div class="line-22"><span class="k">end</span>
</div></code></pre></figure>

<p>A few days after making those changes, we ran into another custom Null Object
in our app, the <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilGoose</span></code>. Our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilGoose</span></code> ran into the
same problem that <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> originally did. A new method was added to the
<code class="highlight language-ruby" data-lang="ruby"><span class="no">Goose</span></code> class that wasn’t reflected in <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilGoose</span></code> and a bug appeared.</p>

<p>What to do? Well, we try not to run ahead of ourselves or our tests, so the
first thing we did was create a test that expected the missing method, watched
it fail, and copied the <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code> definition from <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code>, renaming as
we needed to.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilGoose</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-3">    <span class="s1">'Demo Goose'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5"> 
</div><div class="line-6">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-7">    <span class="s1">'awake'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9"> 
</div><div class="line-10">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-11">    <span class="s1">'black'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13"> 
</div><div class="line-14">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-15">    <span class="kp">true</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17"> 
</div><div class="line-18">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</div><div class="line-19">    <span class="k">super</span> <span class="k">unless</span> <span class="no">Goose</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-20">    <span class="nb">name</span><span class="p">.</span><span class="nf">ends_with?</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">nil</span>  <span class="k">end</span>
</div><div class="line-21"><span class="k">end</span>
</div></code></pre></figure>

<p>This made our test happy. But the duplicated code made us sad. We like
<a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> code around here. We
knew it was time to factor out our common code into a single spot.</p>

<p>We thought about putting it in a Module that could be included into other
special null objects, but decided instead to make it a full-fledged <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code>
class that we could use standalone as well as a superclass for our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code>
and <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilGoose</span></code>.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilObject</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
</div><div class="line-3">    <span class="vi">@klass</span> <span class="o">=</span> <span class="n">klass</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</div><div class="line-7">    <span class="k">return</span> <span class="k">super</span> <span class="k">unless</span> <span class="vi">@klass</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-8">    <span class="nb">name</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">ends_with?</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">nil</span>
</div><div class="line-9">  <span class="k">end</span>
</div><div class="line-10"><span class="k">end</span>
</div></code></pre></figure>

<p>If you recall in our <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code> implementation, we had to new up an
instance of our <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> class to determine whether it responds to the method we
are testing. Since we want to reuse this method in the generic <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code>, we
won’t know which class to check. Our first pass at a solution requires the
class to be passed into the <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code> constructor, which would look like
<code class="highlight language-ruby" data-lang="ruby"><span class="n">faker</span> <span class="o">=</span> <span class="no">NilObject</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">Duck</span><span class="p">)</span></code>.</p>

<p>In our <code class="highlight language-ruby" data-lang="ruby"><span class="n">initialize</span></code> method we save the class passed in into an instance
variable, <code class="highlight language-ruby" data-lang="ruby"><span class="vi">@klass</span></code>, which <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code> then uses to new up an instance to
check. Now we can fake any class we want with our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code>, and it will
handle exactly those methods the subject responds to and no others. (Note: If
you’re weirded out by passing a class around like that, remember that
everything in Ruby is an object, including classes)</p>

<p>Now we can make <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> inherit from <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code>:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilDuck</span> <span class="o">&lt;</span> <span class="no">NilObject</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-3">    <span class="s1">'Demo Duck'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-7">    <span class="s1">'sleeping'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9">
</div><div class="line-10">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-11">    <span class="s1">'gray'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13">
</div><div class="line-14">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-15">    <span class="kp">true</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17"><span class="k">end</span>
</div></code></pre></figure>

<p>and the same for <code class="language-plaintext highlighter-rouge">NilGoose</code>:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilGoose</span> <span class="o">&lt;</span> <span class="no">NilObject</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-3">    <span class="s1">'Demo Goose'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5"> 
</div><div class="line-6">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-7">    <span class="s1">'awake'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9"> 
</div><div class="line-10">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-11">    <span class="s1">'black'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13"> 
</div><div class="line-14">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-15">    <span class="kp">true</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17"><span class="k">end</span>
</div></code></pre></figure>

<p>This is all very cool, but if I leave the code like this I’m going to have to
run around and find every place in the app in which I create an instance of
<code class="language-plaintext highlighter-rouge">NilDuck</code> or <code class="language-plaintext highlighter-rouge">NilGoose</code> and add the new argument. Hopefully it’s not very many
places, but this is not something I want to do. Let’s go ahead and add
initialize methods to our <code class="language-plaintext highlighter-rouge">NilDuck</code> and <code class="language-plaintext highlighter-rouge">NilGoose</code> classes to take care of
that:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilDuck</span> <span class="o">&lt;</span> <span class="no">NilObject</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">initialize</span>
</div><div class="line-3">    <span class="k">super</span><span class="p">(</span><span class="no">Duck</span><span class="p">)</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-7">    <span class="s1">'Demo Duck'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9"> 
</div><div class="line-10">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-11">    <span class="s1">'sleeping'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13"> 
</div><div class="line-14">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-15">    <span class="s1">'gray'</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17"> 
</div><div class="line-18">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-19">    <span class="kp">true</span>
</div><div class="line-20">  <span class="k">end</span>
</div><div class="line-21"><span class="k">end</span>
</div></code></pre></figure>

<p>and</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilGoose</span> <span class="o">&lt;</span> <span class="no">NilObject</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">initialize</span>
</div><div class="line-3">    <span class="k">super</span><span class="p">(</span><span class="no">Goose</span><span class="p">)</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-7">    <span class="s1">'Demo Goose'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9"> 
</div><div class="line-10">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-11">    <span class="s1">'awake'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13"> 
</div><div class="line-14">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-15">    <span class="s1">'black'</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17"> 
</div><div class="line-18">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-19">    <span class="kp">true</span>
</div><div class="line-20">  <span class="k">end</span>
</div><div class="line-21"><span class="k">end</span>
</div></code></pre></figure>

<p>That works, and it keeps us from having to spread changes around the codebase,
but it does add to the duplication a bit. That initialize method needs to be
added to every new subclass in order to get the shorter <code class="language-plaintext highlighter-rouge">NilSomething.new</code>
syntax. We could live with this, or we could find a way to bake that smarts
into <code class="language-plaintext highlighter-rouge">NilObject</code> itself. But how?</p>

<p>My pair for the week, <a href="https://twitter.com/timtyrrell">@timtyrell</a> came up with
the idea of keying off of the classname of the <code class="language-plaintext highlighter-rouge">NilObject</code> subclass. And that’s
exactly what we did, we made the class parameter optional and keyed off of the
classname.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilObject</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">klass</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</div><div class="line-3">    <span class="vi">@klass</span> <span class="o">=</span> <span class="n">klass</span> <span class="o">||</span> <span class="n">real_class_name</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</div><div class="line-7">    <span class="k">return</span> <span class="k">super</span> <span class="k">unless</span> <span class="vi">@klass</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-8">    <span class="nb">name</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">ends_with?</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">nil</span>
</div><div class="line-9">  <span class="k">end</span>
</div><div class="line-10">
</div><div class="line-11">  <span class="k">def</span> <span class="nf">real_class_name</span>
</div><div class="line-12">    <span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="p">[</span><span class="mi">3</span><span class="o">..-</span><span class="mi">1</span><span class="p">].</span><span class="nf">constantize</span>
</div><div class="line-13">  <span class="k">end</span>
</div><div class="line-14"><span class="k">end</span>
</div></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">real_class_name</code> method (naming is hard; this should probably be
<code class="language-plaintext highlighter-rouge">subject_class_name</code> or something) takes the name of the class, <code class="language-plaintext highlighter-rouge">NilDuck</code> or
<code class="language-plaintext highlighter-rouge">NilGoose</code> and takes the substring that skips the first 3 letters (the length
of ‘Nil’) to the end. It then turns it into a constant so it can be
instantiated.</p>

<p>As an added bonus we decided to implement <code class="language-plaintext highlighter-rouge">respond_to?</code> so it behaves exactly
like the subject class would behave.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilObject</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">klass</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</div><div class="line-3">    <span class="vi">@klass</span> <span class="o">=</span> <span class="n">klass</span> <span class="o">||</span> <span class="n">real_class_name</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</div><div class="line-7">    <span class="k">return</span> <span class="k">super</span> <span class="k">unless</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-8">    <span class="nb">name</span><span class="p">.</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">ends_with?</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">nil</span>
</div><div class="line-9">  <span class="k">end</span>
</div><div class="line-10">
</div><div class="line-11">  <span class="k">def</span> <span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-12">    <span class="vi">@klass</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-13">  <span class="k">end</span>
</div><div class="line-14">
</div><div class="line-15">  <span class="k">def</span> <span class="nf">real_class_name</span>
</div><div class="line-16">    <span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="p">[</span><span class="mi">3</span><span class="o">..-</span><span class="mi">1</span><span class="p">].</span><span class="nf">constantize</span>
</div><div class="line-17">  <span class="k">end</span>
</div><div class="line-18"><span class="k">end</span>
</div></code></pre></figure>

<p>So there you have it. We now have a <code class="language-plaintext highlighter-rouge">NilObject</code> that can stand in for any other
object like so: <code class="language-plaintext highlighter-rouge">NilObject.new(MyOtherClass)</code> and it will respond to exactly
the same interface as <code class="language-plaintext highlighter-rouge">MyOtherClass</code> and answer <code class="language-plaintext highlighter-rouge">respond_to?</code> just like an
instance of <code class="language-plaintext highlighter-rouge">MyOtherClass</code> would. If we need to override some of the methods of
<code class="language-plaintext highlighter-rouge">MyOtherClass</code> to return other than <code class="language-plaintext highlighter-rouge">nil</code> or <code class="language-plaintext highlighter-rouge">false</code> we can create a new
<code class="language-plaintext highlighter-rouge">NilMyOtherClass</code> as a subclass of <code class="language-plaintext highlighter-rouge">NilObject</code> and override what we need to.</p>

<p>I’ll leave you with a thought exercise. What would happen if you instantiated a
<code class="language-plaintext highlighter-rouge">NilObject</code> without passing a class to the constructor: <code class="language-plaintext highlighter-rouge">nil_object =
NilObject.new</code>? What would you get? As a bonus, how would you make the code
inside the <code class="language-plaintext highlighter-rouge">real_class_name</code> method more intention revealing than what we wrote?
Leave a comment if you know the answers.</p>]]></content><author><name>Step Aument</name></author><category term="Design" /><category term="Patterns" /><category term="code" /><summary type="html"><![CDATA[In a previous post I described using method_missing in a Null Object to stand in for another object and respond smartly to the original object’s interface. At the end of that post I suggested that you could go farther than we did in creating a more abstract object. Well, we got that chance.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Ann%20H%20on%20Pexels%22,%20%22feature%22=%3E%22/assets/images/hero/bath-duck-close-up-cute-592677.jpg%22,%20%22topPosition%22=%3E%22-420px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Ann%20H%20on%20Pexels%22,%20%22feature%22=%3E%22/assets/images/hero/bath-duck-close-up-cute-592677.jpg%22,%20%22topPosition%22=%3E%22-420px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ruby Hash#fetch and Javascript</title><link href="https://www.stephenaument.com/blog/ruby-hash-dot-fetch-and-javascript/" rel="alternate" type="text/html" title="Ruby Hash#fetch and Javascript" /><published>2014-03-06T19:21:15-06:00</published><updated>2014-03-06T19:21:15-06:00</updated><id>https://www.stephenaument.com/blog/ruby-hash-dot-fetch-and-javascript</id><content type="html" xml:base="https://www.stephenaument.com/blog/ruby-hash-dot-fetch-and-javascript/"><![CDATA[<p>In a <a href="/blog/2014/03/05/the-null-object-pattern-and-method-missing-in-ruby/">previous
post</a> I
mentioned a case in which I had a Haml template in a Rails app with Javascript
in it. The template was rendering Ruby values into what would become a JSON
object (Javascript Hash) in the browser. In that particular case, a method call
on a Null Object was returning nil and breaking the Javascript.</p>

<p>Well, today I encountered another variation of this problem. In this case, I
had a Ruby Hash feeding values into the JSON object. It looked like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="n">var</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
</div><div class="line-2">  <span class="s2">"gender"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">search_params</span><span class="p">[</span><span class="s1">'gender'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</div><div class="line-3">  <span class="s2">"age"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">current_user</span><span class="p">.</span><span class="nf">age</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</div><div class="line-4">  <span class="s2">"language"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">search_params</span><span class="p">[</span><span class="s1">'language'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</div><div class="line-5">  <span class="s2">"query"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">search_params</span><span class="p">[</span><span class="s1">'query'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</div><div class="line-6">  <span class="s2">"properties"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">search_params</span><span class="p">[</span><span class="s1">'properties'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>
</div><div class="line-7"><span class="p">};</span>
</div></code></pre></figure>

<p>Two of these fields on the ruby hash are empty: <code class="highlight language-ruby" data-lang="ruby"><span class="n">language</span></code> and <code class="highlight language-ruby" data-lang="ruby"><span class="n">properties</span></code>.
Notice that this isn’t a problem for most of these fields, but for one it is:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</div><div class="line-2">  <span class="dl">"</span><span class="s2">gender</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">M</span><span class="dl">"</span><span class="p">,</span>
</div><div class="line-3">  <span class="dl">"</span><span class="s2">age</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">27</span><span class="dl">"</span><span class="p">,</span>
</div><div class="line-4">  <span class="dl">"</span><span class="s2">language</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
</div><div class="line-5">  <span class="dl">"</span><span class="s2">query</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">specials</span><span class="dl">"</span><span class="p">,</span>                                                                                                                  
</div><div class="line-6">  <span class="dl">"</span><span class="s2">properties</span><span class="dl">"</span><span class="p">:</span> 
</div><div class="line-7"><span class="p">};</span>
</div></code></pre></figure>

<p>See that? The first four fields feed into double quotes as strings. If they are
empty, they are empty. It may cause an issue somewhere down the line, but the
Javascript itself is valid.</p>

<p>The <code class="highlight language-ruby" data-lang="ruby"><span class="n">properties</span></code> field, on the other hand is expecting a JSON object. That
missing bit will cause Javascript to blow up once this loads in the browser.</p>

<p>What’s the solution here? In this case, I turned to <code class="highlight language-ruby" data-lang="ruby"><span class="no">Hash</span><span class="c1">#fetch</span></code> rather than
the <code class="highlight language-ruby" data-lang="ruby"><span class="p">[]</span></code> accessor. What’s the difference? There are two main differences
between the bracket accessor and the <code class="highlight language-ruby" data-lang="ruby"><span class="n">fetch</span></code> method. First,
<code class="highlight language-ruby" data-lang="ruby"><span class="n">my_hash</span><span class="p">[</span><span class="ss">:some_missing_key</span><span class="p">]</span></code> will return <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code> if the key is not found in the
hash. If <code class="highlight language-ruby" data-lang="ruby"><span class="n">my_hash</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="ss">:some_missing_key</span><span class="p">)</span></code> can’t find a key, it will raise a
<code class="highlight language-ruby" data-lang="ruby"><span class="no">KeyError</span></code> exception.</p>

<p>That’s not really what we are looking for, which brings me to the second
difference. <code class="highlight language-ruby" data-lang="ruby"><span class="no">Hash</span><span class="c1">#fetch</span></code> takes an optional second argument which specifies a
default value. So if we call <code class="highlight language-ruby" data-lang="ruby"><span class="n">my_hash</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="ss">:some_missing_key</span><span class="p">,</span> <span class="s1">'tacos'</span><span class="p">)</span></code> and
the key is not found in the hash, it will return <code class="highlight language-ruby" data-lang="ruby"><span class="s1">'tacos'</span></code> instead of <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>.
That’s exactly what I needed. I returned an empty JSON object <code class="highlight language-ruby" data-lang="ruby"><span class="p">{}</span></code> as the
default.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="n">var</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
</div><div class="line-2">  <span class="s2">"gender"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">search_params</span><span class="p">[</span><span class="s1">'gender'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</div><div class="line-3">  <span class="s2">"age"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">current_user</span><span class="p">.</span><span class="nf">age</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</div><div class="line-4">  <span class="s2">"language"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">search_params</span><span class="p">[</span><span class="s1">'language'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</div><div class="line-5">  <span class="s2">"query"</span><span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="n">search_params</span><span class="p">[</span><span class="s1">'query'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</div><div class="line-6">  <span class="s2">"properties"</span><span class="p">:</span> <span class="c1">#{search_params.fetch('properties', {})}</span>
</div><div class="line-7"><span class="p">};</span>
</div></code></pre></figure>

<p>This degraded nicely in the cases in which I had no <code class="highlight language-ruby" data-lang="ruby"><span class="n">properties</span></code> hash in my
<code class="highlight language-ruby" data-lang="ruby"><span class="n">search_params</span></code> hash.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</div><div class="line-2">  <span class="dl">"</span><span class="s2">gender</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">M</span><span class="dl">"</span><span class="p">,</span>
</div><div class="line-3">  <span class="dl">"</span><span class="s2">age</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">27</span><span class="dl">"</span><span class="p">,</span>
</div><div class="line-4">  <span class="dl">"</span><span class="s2">language</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
</div><div class="line-5">  <span class="dl">"</span><span class="s2">query</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">specials</span><span class="dl">"</span><span class="p">,</span>                                                                                                            
</div><div class="line-6">  <span class="dl">"</span><span class="s2">properties</span><span class="dl">"</span><span class="p">:</span> <span class="p">{}</span>
</div><div class="line-7"><span class="p">};</span>
</div></code></pre></figure>

<p>No more broken Javascript.</p>]]></content><author><name>Step Aument</name></author><category term="Intermediate Ruby" /><category term="Javascript" /><category term="code" /><summary type="html"><![CDATA[In a previous post I mentioned a case in which I had a Haml template in a Rails app with Javascript in it. The template was rendering Ruby values into what would become a JSON object (Javascript Hash) in the browser. In that particular case, a method call on a Null Object was returning nil and breaking the Javascript.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Mitchell%20Orr%20on%20Unsplash%22,%20%22feature%22=%3E%22/assets/images/hero/mitchell-orr-389605-unsplash.jpg%22,%20%22topPosition%22=%3E%22-200px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Mitchell%20Orr%20on%20Unsplash%22,%20%22feature%22=%3E%22/assets/images/hero/mitchell-orr-389605-unsplash.jpg%22,%20%22topPosition%22=%3E%22-200px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Null Object Pattern and method_missing in Ruby</title><link href="https://www.stephenaument.com/blog/the-null-object-pattern-and-method-missing-in-ruby/" rel="alternate" type="text/html" title="The Null Object Pattern and method_missing in Ruby" /><published>2014-03-05T23:01:09-06:00</published><updated>2014-03-05T23:01:09-06:00</updated><id>https://www.stephenaument.com/blog/the-null-object-pattern-and-method-missing-in-ruby</id><content type="html" xml:base="https://www.stephenaument.com/blog/the-null-object-pattern-and-method-missing-in-ruby/"><![CDATA[<p>I encountered an interesting problem this week that allowed me to dig into the
Null Object pattern, Ruby duck typing, and Ruby’s method_missing.</p>

<p>In our app we have a <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> class (name changed to protect the innocent). Most
of our users have a <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> associated with their account, but some don’t. In
our application, we have certain situations which expect a Duck, even if the
user doesn’t have one. If we don’t have a Duck, but our app expects one and
passes it a message like <code class="highlight language-ruby" data-lang="ruby"><span class="n">quack</span><span class="p">,</span></code> we will receive an ugly <code class="language-plaintext highlighter-rouge">NoMethodError:
undefined method 'quack' for nil:NilClass</code> error.</p>

<p>How can we solve this without spreading smelly nil checks around our system? It
turns out there is an existing design pattern for just this situation, the Null
Object pattern. In the Null Object pattern, we create a stand in object for our
<code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> that can respond to the same interface, but without returning any
values. We avoid ugly <code class="highlight language-ruby" data-lang="ruby"><span class="no">NoMethodError</span></code>s without having to check for the objects
existence everywhere.</p>

<p>Here is our Duck:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">Duck</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">awake?</span>
</div><div class="line-3">    <span class="n">status</span> <span class="o">==</span> <span class="s1">'awake'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">quack</span>
</div><div class="line-7">    <span class="nb">puts</span> <span class="n">quack_style</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9"><span class="k">end</span>
</div></code></pre></figure>

<p>This is a Ruby on Rails ActiveRecord model, so there is more to it than we see
here. Here is the database migration file:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">CreateDucks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">change</span>
</div><div class="line-3">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="nb">name</span>
</div><div class="line-4">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="n">status</span>
</div><div class="line-5">    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span> <span class="n">hunger</span>
</div><div class="line-6">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="n">quack_style</span>
</div><div class="line-7">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="n">color</span>
</div><div class="line-8">    <span class="n">t</span><span class="p">.</span><span class="nf">migratory</span> <span class="n">boolean</span>
</div><div class="line-9">  <span class="k">end</span>
</div><div class="line-10"><span class="k">end</span>
</div></code></pre></figure>

<p>For each of these fields, ActiveRecord will create getter and setter methods in
the background. But for the <code class="highlight language-ruby" data-lang="ruby"><span class="n">migratory</span></code> boolean field, we will get the bonus
<code class="highlight language-ruby" data-lang="ruby"><span class="n">migratory?</span></code> predicate method.</p>

<p>In our case, it turned out that we need our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> to return <em>some</em> values,
but most things should just return <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>. The simplest way for us to implement
our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code>, and the state in which I found my <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> code this week looks
something like the following:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilDuck</span>
</div><div class="line-2">  <span class="nb">attr_writer</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:status</span><span class="p">,</span> <span class="ss">:hunger</span><span class="p">,</span> <span class="ss">:quack_style</span><span class="p">,</span> <span class="ss">:color</span><span class="p">,</span> <span class="ss">:migratory</span>
</div><div class="line-3">
</div><div class="line-4">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-5">    <span class="s1">'Demo Duck'</span>
</div><div class="line-6">  <span class="k">end</span>
</div><div class="line-7">
</div><div class="line-8">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-9">    <span class="s1">'sleeping'</span>
</div><div class="line-10">  <span class="k">end</span>
</div><div class="line-11">
</div><div class="line-12">  <span class="k">def</span> <span class="nf">hunger</span>
</div><div class="line-13">    <span class="kp">nil</span>
</div><div class="line-14">  <span class="k">end</span>
</div><div class="line-15">
</div><div class="line-16">  <span class="k">def</span> <span class="nf">quack</span>
</div><div class="line-17">  <span class="k">end</span>
</div><div class="line-18">
</div><div class="line-19">  <span class="k">def</span> <span class="nf">quack_style</span>
</div><div class="line-20">    <span class="kp">nil</span>
</div><div class="line-21">  <span class="k">end</span>
</div><div class="line-22">
</div><div class="line-23">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-24">    <span class="s1">'gray'</span>
</div><div class="line-25">  <span class="k">end</span>
</div><div class="line-26">
</div><div class="line-27">  <span class="k">def</span> <span class="nf">awake?</span>
</div><div class="line-28">    <span class="kp">false</span>
</div><div class="line-29">  <span class="k">end</span>
</div><div class="line-30">
</div><div class="line-31">  <span class="k">def</span> <span class="nf">migratory</span>
</div><div class="line-32">    <span class="kp">nil</span>
</div><div class="line-33">  <span class="k">end</span>
</div><div class="line-34">
</div><div class="line-35">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-36">    <span class="kp">true</span>
</div><div class="line-37">  <span class="k">end</span>
</div><div class="line-38"><span class="k">end</span>
</div></code></pre></figure>

<p>Here we have provided the attribute setters our fake object needs with the
<code class="highlight language-ruby" data-lang="ruby"><span class="nb">attr_writer</span></code> call. We then proceed to override each getter as needed. There
are a few special cases in which a value other than nil is desired, but the
default return value for our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> is <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>. In the cases in which we don’t
have an actual <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> and need to use a demo <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code>, we can pass in an instance
of our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> and everything will work as expected.</p>

<blockquote>
  <p>Note: since Ruby is not a strongly typed language, we don’t have to subclass
our <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> here or implement a formal common interface as we would in a
strongly-typed language like Java. In Rubyland, types are determined by the
public interface of the object in question. So if our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code>, or any other
object for that matter, implements the methods our client object calls in
<code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code>, we can substitute it. This is often called “duck typing,” since if an
object quacks like a duck, and acts like a duck, we can usually consider it a
duck. We <em>do</em> implement a common interface, but the interface that we
implement is conceptual, represented by the messages to which we expect our
duck to respond. It’s not baked into the language as a formal construct.</p>
</blockquote>

<p>So what’s wrong with this code? Nothing at face value. Maybe it could be
refactored into something less verbose, but it’s functional and fairly
straightforward. In the beginning it served our app quite well. But I came to
this code last week because of a bug uncovered by a change in another area of
the app. It turned out that my <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> code had gotten stale and not kept up
with changes to the <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> class. Methods had been added to <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code>, but not to
<code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code>. Now <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> looks like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">Duck</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">awake?</span>
</div><div class="line-3">    <span class="n">status</span> <span class="o">==</span> <span class="s1">'awake'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">  
</div><div class="line-6">  <span class="k">def</span> <span class="nf">quack</span>
</div><div class="line-7">    <span class="nb">puts</span> <span class="n">quack_style</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9">
</div><div class="line-10">  <span class="k">def</span> <span class="nf">multi_colored?</span>
</div><div class="line-11">    <span class="o">!</span><span class="n">secondary_color</span><span class="p">.</span><span class="nf">nil?</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13"><span class="k">end</span>
</div></code></pre></figure>

<p>And the migration:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">CreateDucks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">change</span>
</div><div class="line-3">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="nb">name</span>
</div><div class="line-4">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="n">status</span>
</div><div class="line-5">    <span class="n">t</span><span class="p">.</span><span class="nf">integer</span> <span class="n">hunger</span>
</div><div class="line-6">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="n">quack_style</span>
</div><div class="line-7">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="n">color</span>
</div><div class="line-8">    <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="n">secondary_color</span>
</div><div class="line-9">    <span class="n">t</span><span class="p">.</span><span class="nf">migratory</span> <span class="n">boolean</span>
</div><div class="line-10">  <span class="k">end</span>
</div><div class="line-11"><span class="k">end</span>
</div></code></pre></figure>

<p>We don’t have equivalent <code class="highlight language-ruby" data-lang="ruby"><span class="n">secondary_color</span></code> and  <code class="highlight language-ruby" data-lang="ruby"><span class="n">multi_colored?</span></code> methods and
our NilDuck started causing errors. Since none of these new methods requirs
special values, I could have just added equivalent getters in NilDuck that
returned <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>. But since I’m a lazy programmer, I asked myself how I could
avoid editing this class in the future. I turned to Ruby’s <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code>!</p>

<p>In order to understand what my pair and I did here, you need to understand a
little about the way Ruby looks up a method, or message, passed to an object.
When you call a method on a Ruby object, Ruby first looks to see if the method
has been defined on the object instance itself (or more precisely on it’s
<a href="http://en.wikipedia.org/wiki/Metaclass">eigenclass</a>), if it doesn’t find it it
will then look in any included modules in reverse include order, then in the
instance methods of the class, and finally in the instance methods of the
<code class="highlight language-ruby" data-lang="ruby"><span class="no">Object</span></code> class, the ultimate ancestor of every object in Ruby. If Ruby still
can’t find the method, it starts the search over at our instance, this time
trying to call <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code>. If it can’t find a definition for
<code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code> somewhere in our inheritance chain, only then will it throw a
<code class="highlight language-ruby" data-lang="ruby"><span class="no">NoMethodError</span></code>.</p>

<p>The <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code> callback gives us the hook we need to handle our, well,
missing methods. Let’s refactor our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> to use <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code>:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilDuck</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-3">    <span class="s1">'Demo Duck'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-7">    <span class="s1">'sleeping'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9">
</div><div class="line-10">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-11">    <span class="s1">'gray'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13">
</div><div class="line-14">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-15">    <span class="kp">true</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17">
</div><div class="line-18">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</div><div class="line-19">    <span class="no">Duck</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">?</span> <span class="kp">nil</span> <span class="p">:</span> <span class="k">super</span>
</div><div class="line-20">  <span class="k">end</span>
</div><div class="line-21"><span class="k">end</span>
</div></code></pre></figure>

<p>See what we did there? We want <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> to have the same interface as <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code>,
so in our <code class="highlight language-ruby" data-lang="ruby"><span class="nb">method_missing</span></code> implementation, we first checked to see whether
<code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> responds to the method our client code attempted to call. If it does, we
return <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>, otherwise we pass the buck to super. Our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> will now
respond to everything that <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> responds to and throw a <code class="highlight language-ruby" data-lang="ruby"><span class="no">NoMethodError</span></code> for
anything that it doesn’t respond to. As a bonus, we got to eliminate a lot of
code here.</p>

<p>But what about predicate methods? Well, in Ruby, <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code> is falsey, so this code
will work correctly in an <code class="highlight language-ruby" data-lang="ruby"><span class="k">if</span><span class="sr">/unless/</span><span class="o">!</span></code> situation, but what about a situation
in which you might need <code class="highlight language-ruby" data-lang="ruby"><span class="n">migratory?</span></code> to explicitly give you <code class="highlight language-ruby" data-lang="ruby"><span class="kp">false</span></code> instead of
<code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>? What if you are going to pass that <code class="highlight language-ruby" data-lang="ruby"><span class="kp">true</span></code> or <code class="highlight language-ruby" data-lang="ruby"><span class="kp">false</span></code> along to someone
else as a string? What if you need to feed it into javascript from an erb or
haml template?</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="p">{</span> <span class="nl">multiColored</span><span class="p">:</span> <span class="p">}</span> <span class="c1">// !!! Not a valid JSON object, buddy!</span>
</div></code></pre></figure>

<p>If this <code class="highlight language-ruby" data-lang="ruby"><span class="n">duck</span></code> is our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code>, <code class="highlight language-ruby" data-lang="ruby"><span class="n">duck</span><span class="p">.</span><span class="nf">multi_colored?</span></code> will return <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>. When
the template is rendered and the string is interpolated, <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>’s <code class="highlight language-ruby" data-lang="ruby"><span class="nb">to_s</span></code> method
will be invoked, which will return an empty string instead of <code class="highlight language-ruby" data-lang="ruby"><span class="s1">'false'</span></code>. This
will result in a javascript error in the browser:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilDuck</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-3">    <span class="s1">'Demo Duck'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-7">    <span class="s1">'sleeping'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9">
</div><div class="line-10">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-11">    <span class="s1">'gray'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13">
</div><div class="line-14">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-15">    <span class="kp">true</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17">
</div><div class="line-18">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</div><div class="line-19">    <span class="k">super</span> <span class="k">unless</span> <span class="no">Duck</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-20">    <span class="nb">name</span><span class="p">.</span><span class="nf">ends_with?</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">nil</span>
</div><div class="line-21">  <span class="k">end</span>
</div><div class="line-22"><span class="k">end</span>
</div></code></pre></figure>

<p>Whoops! That’s not what we wanted at all! We want <code class="highlight language-ruby" data-lang="ruby"><span class="s1">'true'</span></code> or <code class="highlight language-ruby" data-lang="ruby"><span class="s1">'false'</span></code> to be
rendered. How can we handle that? Well, we can fall back and explicitly create
a <code class="highlight language-ruby" data-lang="ruby"><span class="n">multi_colored?</span></code> method in our <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code> that returns <code class="highlight language-ruby" data-lang="ruby"><span class="kp">false</span></code>, but we can do
better than that. Let’s stay lazy so we don’t have to fix this again! Since it
turns out that we don’t really want our predicate methods to return just a
falsey value, but <code class="highlight language-ruby" data-lang="ruby"><span class="kp">false</span></code> itself. Let’s account for that:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><div class="line-1"><span class="k">class</span> <span class="nc">NilDuck</span>
</div><div class="line-2">  <span class="k">def</span> <span class="nf">name</span>
</div><div class="line-3">    <span class="s1">'Demo Duck'</span>
</div><div class="line-4">  <span class="k">end</span>
</div><div class="line-5">
</div><div class="line-6">  <span class="k">def</span> <span class="nf">status</span>
</div><div class="line-7">    <span class="s1">'sleeping'</span>
</div><div class="line-8">  <span class="k">end</span>
</div><div class="line-9">
</div><div class="line-10">  <span class="k">def</span> <span class="nf">color</span>
</div><div class="line-11">    <span class="s1">'gray'</span>
</div><div class="line-12">  <span class="k">end</span>
</div><div class="line-13">
</div><div class="line-14">  <span class="k">def</span> <span class="nf">migratory?</span>
</div><div class="line-15">    <span class="kp">true</span>
</div><div class="line-16">  <span class="k">end</span>
</div><div class="line-17">
</div><div class="line-18">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</div><div class="line-19">    <span class="k">super</span> <span class="k">unless</span> <span class="no">Duck</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</div><div class="line-20">    <span class="nb">name</span><span class="p">.</span><span class="nf">ends_with?</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">nil</span>
</div><div class="line-21">  <span class="k">end</span>
</div><div class="line-22"><span class="k">end</span>
</div></code></pre></figure>

<p>Now if <code class="highlight language-ruby" data-lang="ruby"><span class="no">Duck</span></code> responds to our method and our method ends with ‘?’, <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilDuck</span></code>
will return <code class="highlight language-ruby" data-lang="ruby"><span class="kp">false</span></code>, if it doesn’t end with ‘?’ it will return <code class="highlight language-ruby" data-lang="ruby"><span class="kp">nil</span></code>. Our
template will now render the javascript we expected:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><div class="line-1"><span class="p">{</span> <span class="nl">multiColored</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
</div></code></pre></figure>

<p>You could certainly take this further and abstract out a generic <code class="highlight language-ruby" data-lang="ruby"><span class="no">NilObject</span></code>
for your app, but this serves our needs quite well. For further reading on the
Null Object pattern:
<a href="http://devblog.avdi.org/2011/05/30/null-objects-and-falsiness/">http://devblog.avdi.org/2011/05/30/null-objects-and-falsiness/</a></p>]]></content><author><name>Step Aument</name></author><category term="Design Patterns" /><category term="Metaprogramming" /><summary type="html"><![CDATA[I encountered an interesting problem this week that allowed me to dig into the Null Object pattern, Ruby duck typing, and Ruby’s method_missing.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Braydon%20Anderson%20on%20Unsplash%22,%20%22feature%22=%3E%22/assets/images/hero/braydon-anderson-105552-unsplash.jpg%22,%20%22topPosition%22=%3E%22-420px%22%7D" /><media:content medium="image" url="https://www.stephenaument.com/%7B%22credit%22=%3E%22Photo%20by%20Braydon%20Anderson%20on%20Unsplash%22,%20%22feature%22=%3E%22/assets/images/hero/braydon-anderson-105552-unsplash.jpg%22,%20%22topPosition%22=%3E%22-420px%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>